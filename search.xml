<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习2. 决策树</title>
      <link href="/2019/11/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02.%20%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2019/11/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02.%20%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习1. KNN</title>
      <link href="/2019/11/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01.%20KNN/"/>
      <url>/2019/11/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01.%20KNN/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习实战笔记1-K-近邻算法"><a href="#机器学习实战笔记1-K-近邻算法" class="headerlink" title="机器学习实战笔记1. K-近邻算法"></a>机器学习实战笔记1. K-近邻算法</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>KNN算法采用测量不同特征值之间的距离方法进行分类. 一般来说,只选择样本数据集中前k个最相似的数据,来确定新数据的分类.</p><ul><li>优点: 精度高,对异常值不敏感,无数据输入假定</li><li>缺点: 计算复杂度高,空间复杂度高</li></ul><h2 id="2-KNN分类算法实现"><a href="#2-KNN分类算法实现" class="headerlink" title="2. KNN分类算法实现"></a>2. KNN分类算法实现</h2><h3 id="2-1-生成数据集"><a href="#2-1-生成数据集" class="headerlink" title="2.1 生成数据集"></a>2.1 生成数据集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creatDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    group = np.array([[<span class="number">1.0</span>,<span class="number">1.1</span>],[<span class="number">1.0</span>,<span class="number">1.0</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0.1</span>]])</span><br><span class="line">    labels = [<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>]</span><br><span class="line">    <span class="keyword">return</span> group, labels</span><br></pre></td></tr></table></figure><h3 id="2-2-分析图像"><a href="#2-2-分析图像" class="headerlink" title="2.2 分析图像"></a>2.2 分析图像</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">dataset, labels = creatDataSet()</span><br><span class="line">plt.scatter(dataset[:,<span class="number">0</span>],dataset[:,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="2-3-kNN分类伪代码"><a href="#2-3-kNN分类伪代码" class="headerlink" title="2.3 kNN分类伪代码"></a>2.3 kNN分类伪代码</h3><pre><code>对未知类别属性的数据集中的每一个点依次执行:1. 计算已知类别数据集中的点与当前点之间的距离2. 按照距离递增次序排序3. 选取与当前点距离最小的k个点4. 确定前k个点所在类别的出现频率5. 返回前k个点出现频率最高的类别当作当前点的预测分类</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataset, labels, k)</span>:</span></span><br><span class="line">    datasetSize = dataset.shape[<span class="number">0</span>]</span><br><span class="line">    diffMat = np.tile(inX, (datasetSize,<span class="number">1</span>)) - dataset</span><br><span class="line">    <span class="comment"># np.tile(x,shape) 在shape中构造重复个x</span></span><br><span class="line">    <span class="comment"># np.tile([1,2],(3,1)) = [1,2];[1,2];[1,2]</span></span><br><span class="line">    <span class="comment"># diffMat就是距离</span></span><br><span class="line">    sqDiffMat = diffMat ** <span class="number">2</span></span><br><span class="line">    sqDistance = sqDiffMat.sum(axis = <span class="number">1</span>) <span class="comment"># 行距离相加</span></span><br><span class="line">    distances = sqDistance ** <span class="number">0.5</span></span><br><span class="line">    sortedDistIndices = distances.argsort() <span class="comment"># 返回datasetSize个index,[0,1,3,2],越小越近</span></span><br><span class="line">    classCount=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndices[i]]</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel,<span class="number">0</span>) +<span class="number">1</span> <span class="comment"># classCount &#123;'A':2,'B':1&#125;</span></span><br><span class="line">    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># sortedClassCount [('A', 2), ('B', 1)]</span></span><br><span class="line">    <span class="keyword">return</span> sortedClassCount [<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="3-在约会网站上使用kNN算法"><a href="#3-在约会网站上使用kNN算法" class="headerlink" title="3. 在约会网站上使用kNN算法"></a>3. 在约会网站上使用kNN算法</h2><h3 id="3-1-准备数据"><a href="#3-1-准备数据" class="headerlink" title="3.1 准备数据"></a>3.1 准备数据</h3><p>训练集可在<a href="https://www.manning.com/downloads/1108" target="_blank" rel="noopener"> 这里 </a>获取</p><p>原版书用的是python2.7和numpy,我更倾向于pandas的dataframe,所以就不重复造轮子了.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">PATH = <span class="string">'/home/finch/data/'</span></span><br><span class="line">test = pd.read_table(<span class="string">f'<span class="subst">&#123;PATH&#125;</span>Ch02/datingTestSet2.txt'</span>,header = <span class="literal">None</span>)</span><br><span class="line">datingDataMat = test[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]].copy()</span><br><span class="line">datingLabels = test[[<span class="number">3</span>]].copy()</span><br></pre></td></tr></table></figure><h3 id="3-2-散点图"><a href="#3-2-散点图" class="headerlink" title="3.2 散点图"></a>3.2 散点图</h3><p>这里分别用datingDataMat里的第2,3列和第1,2列画图</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Video Game Percentage (%)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Weekly Icecream Eaten (L)'</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(datingDataMat[<span class="number">1</span>],datingDataMat[<span class="number">2</span>],</span><br><span class="line">           s = <span class="number">10</span>*np.array(datingLabels[datingLabels.columns[<span class="number">0</span>]]),</span><br><span class="line">           c = np.array(datingLabels[datingLabels.columns[<span class="number">0</span>]]))</span><br><span class="line"><span class="comment"># s 大小, c 颜色</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Yearly Flying Points (miles)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Video Game Percentage (%)'</span>)</span><br><span class="line">plt.scatter(datingDataMat[<span class="number">0</span>],datingDataMat[<span class="number">1</span>],</span><br><span class="line">           s = <span class="number">8</span>*np.array(datingLabels[datingLabels.columns[<span class="number">0</span>]]),</span><br><span class="line">           c = np.array(datingLabels[datingLabels.columns[<span class="number">0</span>]]))</span><br></pre></td></tr></table></figure><p>得出来的两幅图就跟书上一样了</p><h3 id="3-3-特征值归一化"><a href="#3-3-特征值归一化" class="headerlink" title="3.3 特征值归一化"></a>3.3 特征值归一化</h3><p>与其使用真实值,应该把<del>大的</del><strong>所有的</strong>数值normalize一下.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datingDataMat = (datingDataMat-datingDataMat.min(<span class="number">0</span>))/datingDataMat.max(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="3-4-测试-训练"><a href="#3-4-测试-训练" class="headerlink" title="3.4 测试(训练)"></a>3.4 测试(训练)</h3><p>由于2.2里我使用的是原书上的numpy结构,datingClassTest也需要从dataframe转化成np.array</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datingClassTest</span><span class="params">()</span>:</span></span><br><span class="line">    hoRatio = <span class="number">0.1</span></span><br><span class="line">    test = pd.read_table(<span class="string">f'<span class="subst">&#123;PATH&#125;</span>Ch02/datingTestSet2.txt'</span>,header = <span class="literal">None</span>)</span><br><span class="line">    datingDataMat = test[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]].copy()</span><br><span class="line">    datingLabels = test[[<span class="number">3</span>]].copy()</span><br><span class="line">    normMat = (datingDataMat-datingDataMat.min(<span class="number">0</span>))/datingDataMat.max(<span class="number">0</span>)</span><br><span class="line">    m = normMat.shape[<span class="number">0</span>]</span><br><span class="line">    numTestVecs = int(m*hoRatio)</span><br><span class="line">    errorCount = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTestVecs): <span class="comment">#随机选10%</span></span><br><span class="line">        classifierResult = classify0(normMat.iloc[i].to_numpy(),normMat.iloc[numTestVecs:m].to_numpy(),datingLabels.iloc[:,<span class="number">0</span>][numTestVecs:m].values,<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"the classifier came back with: %d, the real answer is: %d"</span> % (classifierResult,int(datingLabels.iloc[i])))</span><br><span class="line">        <span class="keyword">if</span> classifierResult != int(datingLabels.iloc[i]):</span><br><span class="line">            errorCount += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"the total error rate is: %f"</span> % (errorCount/float(numTestVecs)))</span><br></pre></td></tr></table></figure><p>得到的准确率接近于94%</p><h2 id="4-使用kNN构建手写识别系统"><a href="#4-使用kNN构建手写识别系统" class="headerlink" title="4. 使用kNN构建手写识别系统"></a>4. 使用kNN构建手写识别系统</h2><p>偷个懒…我就直接复制源码了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span><span class="params">(filename)</span>:</span></span><br><span class="line">    returnVect = np.zeros((<span class="number">1</span>,<span class="number">1024</span>))</span><br><span class="line">    fr = open(filename)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        lineStr = fr.readline()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            returnVect[<span class="number">0</span>,<span class="number">32</span>*i+j] = int(lineStr[j])</span><br><span class="line">    <span class="keyword">return</span> returnVect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handwritingClassTest</span><span class="params">()</span>:</span></span><br><span class="line">    hwLabels = []</span><br><span class="line">    trainingFileList = os.listdir(<span class="string">f'<span class="subst">&#123;PATH&#125;</span>Ch02/trainingDigits'</span>)          <span class="comment">#load the training set</span></span><br><span class="line">    m = len(trainingFileList)</span><br><span class="line">    trainingMat = np.zeros((m,<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        fileNameStr = trainingFileList[i]</span><br><span class="line">        fileStr = fileNameStr.split(<span class="string">'.'</span>)[<span class="number">0</span>]     <span class="comment">#take off .txt</span></span><br><span class="line">        classNumStr = int(fileStr.split(<span class="string">'_'</span>)[<span class="number">0</span>])</span><br><span class="line">        hwLabels.append(classNumStr)</span><br><span class="line">        trainingMat[i,:] = img2vector(<span class="string">f'<span class="subst">&#123;PATH&#125;</span>Ch02/trainingDigits/%s'</span> % fileNameStr)</span><br><span class="line">    testFileList = os.listdir(<span class="string">f'<span class="subst">&#123;PATH&#125;</span>Ch02/testDigits'</span>)        <span class="comment">#iterate through the test set</span></span><br><span class="line">    errorCount = <span class="number">0.0</span></span><br><span class="line">    mTest = len(testFileList)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(mTest):</span><br><span class="line">        fileNameStr = testFileList[i]</span><br><span class="line">        fileStr = fileNameStr.split(<span class="string">'.'</span>)[<span class="number">0</span>]     <span class="comment">#take off .txt</span></span><br><span class="line">        classNumStr = int(fileStr.split(<span class="string">'_'</span>)[<span class="number">0</span>])</span><br><span class="line">        vectorUnderTest = img2vector(<span class="string">f'<span class="subst">&#123;PATH&#125;</span>Ch02/testDigits/%s'</span> % fileNameStr)</span><br><span class="line">        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"the classifier came back with: %d, the real answer is: %d"</span> % (classifierResult, classNumStr))</span><br><span class="line">        <span class="keyword">if</span> (classifierResult != classNumStr): errorCount += <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\nthe total number of errors is: %d"</span> % errorCount)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\nthe total error rate is: %f"</span> % (errorCount/float(mTest)))</span><br></pre></td></tr></table></figure><p>核心思想是:</p><ul><li>32x32的txt格式图像</li><li>每个图像转化为1x1024的向量</li><li>然后统计trainingset有m个图片</li><li>于是数据集 = m x 1024的矩阵</li><li>用的是for循环一个一个做的比较…每个做1024*m次浮点运算…所以效率非常低</li></ul><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>kNN是最简单的分类算法.其缺点是无法给出任何数据的基础结构信息,因此也无从知晓平均实例样本和典型实例样本具有什么特征<del>这两个玩意是啥</del>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learning markdown</title>
      <link href="/2019/11/17/test1/"/>
      <url>/2019/11/17/test1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/17/hello-world/"/>
      <url>/2019/11/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
